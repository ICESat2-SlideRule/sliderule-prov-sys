# Generated by Django 4.1.3 on 2022-12-02 21:30

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('django_celery_results', '0011_taskresult_periodic_task_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(default='+15555550100', max_length=128, region=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GranChoice',
            fields=[
                ('granularity', models.CharField(choices=[('HOURLY', 'Hourly'), ('DAILY', 'Daily'), ('MONTHLY', 'Monthly')], default='HOURLY', max_length=7, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='OrgAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(default='uninitialized', max_length=200)),
                ('point_of_contact_name', models.CharField(default='support team', max_length=200)),
                ('email', models.EmailField(default='sps.sliderule@gmail.com', max_length=254)),
                ('max_allowance', models.DecimalField(decimal_places=2, max_digits=8)),
                ('monthly_allowance', models.DecimalField(decimal_places=2, max_digits=8)),
                ('balance', models.DecimalField(decimal_places=2, max_digits=8)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('node_mgr_fixed_cost', models.FloatField(default=0.153)),
                ('node_fixed_cost', models.FloatField(default=0.226)),
                ('desired_num_nodes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('cur_nodes', models.IntegerField(default=0)),
                ('min_node_cap', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('max_node_cap', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('max_hrly', models.FloatField(default=1e-07)),
                ('cur_hrly', models.FloatField(default=1e-07)),
                ('min_hrly', models.FloatField(default=1e-07)),
                ('min_ddt', models.DateTimeField(auto_now_add=True)),
                ('cur_ddt', models.DateTimeField(auto_now_add=True)),
                ('max_ddt', models.DateTimeField(auto_now_add=True)),
                ('most_recent_charge_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('most_recent_credit_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('most_recent_recon_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('fc_min_hourly', models.JSONField(default=dict)),
                ('fc_min_daily', models.JSONField(default=dict)),
                ('fc_min_monthly', models.JSONField(default=dict)),
                ('fc_cur_hourly', models.JSONField(default=dict)),
                ('fc_cur_daily', models.JSONField(default=dict)),
                ('fc_cur_monthly', models.JSONField(default=dict)),
                ('fc_max_hourly', models.JSONField(default=dict)),
                ('fc_max_daily', models.JSONField(default=dict)),
                ('fc_max_monthly', models.JSONField(default=dict)),
                ('version', models.CharField(default='latest', max_length=16)),
                ('mfa_code', models.CharField(default='sliderule_1492', max_length=16)),
                ('admin_max_node_cap', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('tokens', models.JSONField(default=dict)),
                ('tokens_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('time_to_live_in_mins', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(15)])),
                ('expire_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('allow_deploy_by_token', models.BooleanField(default=True)),
                ('destroy_when_no_nodes', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('org', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='users.orgaccount')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('mgr_ip_address', models.GenericIPAddressField(default='0.0.0.0')),
                ('active_ps_cmd', models.CharField(blank=True, default='', max_length=32)),
                ('is_deployed', models.BooleanField(default=False)),
                ('deployed_state', models.CharField(default='unknown', max_length=64)),
                ('connection_status', models.CharField(default='unknown', max_length=64)),
                ('version_query_log', models.TextField(default='', editable=False)),
                ('cqro_id', models.UUIDField(null=True)),
                ('cnnro_id', models.UUIDField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PsCmdQueueResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('ps_cmd_output', models.TextField(default='', help_text='Output from the provisioning system server', verbose_name='Provision Cmd Results')),
                ('error', models.TextField(default='', help_text='Errors/Warnings processing cmd', verbose_name='Provision Server Errors')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('ps_cmd_summary_label', models.TextField(default='', help_text='ps cmd task output', verbose_name='Provision Cmd Task')),
                ('org', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fk_org_cqr', to='users.orgaccount')),
                ('task_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fk_tsk_rslt', to='django_celery_results.taskresult')),
            ],
        ),
        migrations.CreateModel(
            name='OrgNumNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('desired_num_nodes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('expiration', models.DateTimeField(default=django.utils.timezone.now)),
                ('has_active_ps_cmd', models.BooleanField(default=False)),
                ('org', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fk_org_onn', to='users.orgaccount')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fk_user_onn', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrgCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('tm', models.DateTimeField(default=django.utils.timezone.now)),
                ('cnt', models.IntegerField(default=0)),
                ('avg', models.FloatField(default=0.0)),
                ('min', models.FloatField(default=0.0)),
                ('max', models.FloatField(default=0.0)),
                ('std', models.FloatField(default=0.0)),
                ('ccr', models.JSONField(default=dict)),
                ('cost_refresh_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('gran', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='fk_gran', to='users.granchoice')),
                ('org', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fk_c_org', to='users.orgaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('active', models.BooleanField(default=False)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('delete_requested', models.BooleanField(default=False)),
                ('activation_date', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fk_org', to='users.orgaccount')),
                ('user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fk_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
